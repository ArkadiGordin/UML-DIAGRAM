@startuml

actor Пользователь
participant "Веб-сайт" as Website
participant "Корзина" as Cart
participant "Оплата" as Payment
participant "Служба доставки" as Delivery
participant "Служба возврата" as Return
participant "Доставщик" as Courier

Пользователь -> Website: Открывает сайт
Пользователь -> Website: Просматривает товары
Пользователь -> Website: Добавляет товар в корзину
Website -> Cart: Обновляет содержимое корзины

Пользователь -> Cart: Просматривает корзину
Пользователь -> Website: Оформляет заказ
Website -> Payment: Перенаправление на оплату
Payment -> Пользователь: Запрашивает данные карты
Пользователь -> Payment: Вводит данные карты
Payment -> Website: Подтверждение оплаты

Website -> Delivery: Отправка данных для доставки
Delivery -> Courier: Назначение доставщика
Courier -> Delivery: Подтверждение принятия заказа
Courier -> Пользователь: Оповещение о статусе доставки
Courier -> Delivery: Заказ доставлен
Delivery -> Пользователь: Подтверждение завершения доставки

...Позже...
Пользователь -> Return: Инициирует возврат товара
Return -> Пользователь: Подтверждение возврата

' Добавление классов, интерфейсов и наследования
package "Модели" {
  class Товар {
    - id: int
    - название: string
    - цена: float
    + getОписание(): string
  }
  class Корзина {
    - товары: List<Tовар>
    + добавитьТовар(товар: Товар)
    + удалитьТовар(товар: Товар)
  }
}

package "Платежная система" {
  interface ПлатежнаяСистема {
    + оплатить(сумма: float)
  }
  class КредитнаяКарта implements ПлатежнаяСистема {
    + оплатить(сумма: float)
  }
  class PayPal implements ПлатежнаяСистема {
    + оплатить(сумма: float)
  }
}

package "Доставка" {
  abstract class Доставка {
    + рассчитатьСроки(): int
  }
  class КурьерскаяДоставка extends Доставка {
    + рассчитатьСроки(): int
  }
  class ПочтоваяДоставка extends Доставка {
    + рассчитатьСроки(): int
  }
  class Доставщик {
    - id: int
    - имя: string
    + принятьЗаказ(заказ: Товар)
    + обновитьСтатус(статус: string)
  }
}

@enduml
